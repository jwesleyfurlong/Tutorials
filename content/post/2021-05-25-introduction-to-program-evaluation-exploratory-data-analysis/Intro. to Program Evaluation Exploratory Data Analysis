---
title: 'Introduction to Program Evaluation: Exploratory Data Analysis'
author: Wesley Furlong
date: '2021-05-25'
slug: introduction-to-program-evaluation-exploratory-data-analysis
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-05-25T07:03:13-04:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

Let's load 5 csv files with child welfare program data from github:

```{r, warning=FALSE, message=FALSE}
library(tidyverse)

clients <- read_csv("https://raw.githubusercontent.com/jwesleyfurlong/Tutorials/main/pe_data_clients.csv")

clinical <-  read_csv("https://raw.githubusercontent.com/jwesleyfurlong/Tutorials/main/pe_data_clinical.csv")

discharges <-  read_csv("https://raw.githubusercontent.com/jwesleyfurlong/Tutorials/main/pe_data_discharges.csv")

permanency <-  read_csv("https://raw.githubusercontent.com/jwesleyfurlong/Tutorials/main/pe_data_permanency.csv")

reports <- read_csv( "https://raw.githubusercontent.com/jwesleyfurlong/Tutorials/main/pe_data_discharges.csv")

```

There are multiple packages you can use for exploratory data analysis. We will introduce four here: SmartEDA, DataExplorer, Skimr, and Hmisc. Let's start with SmartEDA.

![](smart_EDA.png "smart EDA")

One strength of smartEDA is the straight-forward naming convention of the functions. To quickly inspect your data, you can use: 'Exp' (explore), 'Cat' or 'Num' (data type), and 'Stat' or 'Viz' (output type). Categorical data also has a table function (ExpCTable). An automated report can be generated with ExpReport(). The functions can also be [customized extensively](https://www.rdocumentation.org/packages/SmartEDA/versions/0.3.7).

```{r, warning=FALSE, message=FALSE}

library(SmartEDA)

#Let's explore our clinical sheet:

# Overview
ExpData(clinical) 

# You can add an argument to specify the type (1: overview, 2: structure)
ExpData(clinical, type = 1) 
ExpData(clinical, type = 2) 

# Summary of categorical variables
ExpCTable(clinical)

# Add a target (dependent) variable 
ExpCTable(clinical, Target = "clinical_model")

# Additional arguments
ExpCTable(
  clinical,
  Target = "clinical_model", # add a target (dependent) variable
  margin = 1,  #margin of index: 1 for row based proportions, 2 for column based proportions
  clim = 8, # max categories to be considered for frequency/custom tables. Variables will be dropped if unique levels are higher than 'clim' for character or factor variables. 10 is the default. 
  round = 2, # number of digits
  bin = 3, # number of cuts for continuous target variable
  per = FALSE # percentage values. Default is counts. 
  
  )


ExpCatViz(clinical)

ExpNumStat(clinical)

ExpNumViz(clinical)

ExpOutQQ(clinical) # QQ plot (Normality)
```

We can also check for the strength of association with a target variable. Let's examine the association with ACE scores:

```{r, warning=FALSE, message=FALSE}

ExpCatStat(clinical, Target = "ace_score", result = "Stat", Pclass = "Yes")
```
